{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file://D%3A/New%20folder/app/models/User.js"],"sourcesContent":["import mongoose, { Schema } from \"mongoose\";\r\n\r\nconst UserSchema = new Schema({\r\n  name: { type: String, required: true },\r\n  phoneNumber: { type: String, required: true },\r\n  email: { type: String, required: true, unique: true },\r\n  password: { type: String, required: true },\r\n  createdAt: { type: Date, default: Date.now },\r\n});\r\n\r\n// Avoid recompilation in Next.js hot-reload\r\nexport default mongoose.models.User || mongoose.model(\"User\", UserSchema);\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAAC;IAC5B,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,aAAa;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC5C,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;IACzC,WAAW;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;AAC7C;uCAGe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ"}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":["file://D%3A/New%20folder/lib/mongodb.js"],"sourcesContent":["// lib/mongoose.js\n\nimport mongoose from 'mongoose';\n\nconst MONGODB_URI = \"mongodb://localhost:27017/lebel\"; // hardcoded for local DB\n\nif (!MONGODB_URI) {\n  throw new Error('Please define the MONGODB_URI');\n}\n\nlet cached = global.mongoose;\n\nif (!cached) {\n  cached = global.mongoose = { conn: null, promise: null };\n}\n\nasync function connect() {\n  if (cached.conn) {\n    return cached.conn;\n  }\n\n  if (!cached.promise) {\n    const opts = {\n      bufferCommands: false,\n    };\n\n    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {\n      return mongoose;\n    });\n  }\n  cached.conn = await cached.promise;\n  return cached.conn;\n}\n\nexport default connect;\n"],"names":[],"mappings":"AAAA,kBAAkB;;;;AAElB;;AAEA,MAAM,cAAc,mCAAmC,yBAAyB;AAEhF,uCAAkB;;AAElB;AAEA,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;QAClB;QAEA,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,MAAM,IAAI,CAAC,CAAC;YACzD,OAAO;QACT;IACF;IACA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACpB;uCAEe"}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file://D%3A/New%20folder/app/utils/url.js"],"sourcesContent":["export const JWT_SECRET = \"your_secret_key\";\r\n\r\nexport const mainUrl = \"http://localhost:3000/api/\"\r\nexport const endPoints={\r\n  products:\"products\",\r\n  updateProducts:\"update-products\",\r\n\r\n}"],"names":[],"mappings":";;;;;AAAO,MAAM,aAAa;AAEnB,MAAM,UAAU;AAChB,MAAM,YAAU;IACrB,UAAS;IACT,gBAAe;AAEjB"}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file://D%3A/New%20folder/app/api/login/route.js"],"sourcesContent":["// app/api/users/login/route.js\r\nimport { NextResponse } from \"next/server\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport User from \"@/app/models/User\";\r\nimport connect from \"@/lib/mongodb\";\r\nimport { JWT_SECRET } from \"@/app/utils/url\";\r\n\r\n\r\n\r\nexport async function POST(req) {\r\n  try {\r\n    await connect();\r\n\r\n    const { identifier, password } = await req.json(); // email or phone\r\n\r\n    if (!identifier || !password) {\r\n      return NextResponse.json(\r\n        { error: \"Email/Phone and password are required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // find user by email or phoneNumber\r\n    const user = await User.findOne({\r\n      $or: [{ email: identifier }, { phoneNumber: identifier }],\r\n    });\r\n\r\n    if (!user) {\r\n      return NextResponse.json({ error: \"User not found\" }, { status: 404 });\r\n    }\r\n\r\n    // compare password\r\n    const isPasswordValid = await bcrypt.compare(String(password), user.password);\r\n    if (!isPasswordValid) {\r\n      return NextResponse.json({ error: \"Invalid password\" }, { status: 401 });\r\n    }\r\n\r\n    // generate JWT token\r\n    const token = jwt.sign(\r\n      { userId: user._id, email: user.email },\r\n      JWT_SECRET\r\n    );\r\n\r\n    return NextResponse.json({ success:true,msg: \"Login successful\", token }, { status: 200 });\r\n  } catch (error) {\r\n    console.error(\"Login error:\", error);\r\n    return NextResponse.json({ error: \"Login failed\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,+BAA+B;;;;AAC/B;AACA;AACA;AACA;AACA;AACA;;;;;;;AAIO,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,CAAA,GAAA,gHAAA,CAAA,UAAO,AAAD;QAEZ,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI,IAAI,iBAAiB;QAEpE,IAAI,CAAC,cAAc,CAAC,UAAU;YAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAwC,GACjD;gBAAE,QAAQ;YAAI;QAElB;QAEA,oCAAoC;QACpC,MAAM,OAAO,MAAM,uHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAC9B,KAAK;gBAAC;oBAAE,OAAO;gBAAW;gBAAG;oBAAE,aAAa;gBAAW;aAAE;QAC3D;QAEA,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,mBAAmB;QACnB,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,OAAO,WAAW,KAAK,QAAQ;QAC5E,IAAI,CAAC,iBAAiB;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAmB,GAAG;gBAAE,QAAQ;YAAI;QACxE;QAEA,qBAAqB;QACrB,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CACpB;YAAE,QAAQ,KAAK,GAAG;YAAE,OAAO,KAAK,KAAK;QAAC,GACtC,qHAAA,CAAA,aAAU;QAGZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAQ;YAAK,KAAK;YAAoB;QAAM,GAAG;YAAE,QAAQ;QAAI;IAC1F,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;AACF"}},
    {"offset": {"line": 261, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}