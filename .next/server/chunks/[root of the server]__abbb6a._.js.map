{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://D%3A/New%20folder/lib/mongodb.js"],"sourcesContent":["// lib/mongoose.js\n\nimport mongoose from 'mongoose';\n\nconst MONGODB_URI = \"mongodb://localhost:27017/lebel\"; // hardcoded for local DB\n\nif (!MONGODB_URI) {\n  throw new Error('Please define the MONGODB_URI');\n}\n\nlet cached = global.mongoose;\n\nif (!cached) {\n  cached = global.mongoose = { conn: null, promise: null };\n}\n\nasync function connect() {\n  if (cached.conn) {\n    return cached.conn;\n  }\n\n  if (!cached.promise) {\n    const opts = {\n      bufferCommands: false,\n    };\n\n    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {\n      return mongoose;\n    });\n  }\n  cached.conn = await cached.promise;\n  return cached.conn;\n}\n\nexport default connect;\n"],"names":[],"mappings":"AAAA,kBAAkB;;;;AAElB;;AAEA,MAAM,cAAc,mCAAmC,yBAAyB;AAEhF,uCAAkB;;AAElB;AAEA,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;QAClB;QAEA,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,MAAM,IAAI,CAAC,CAAC;YACzD,OAAO;QACT;IACF;IACA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACpB;uCAEe"}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file://D%3A/New%20folder/app/api/users/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport clientPromise from \"@/lib/mongodb\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\n\n// âœ… Secret key for JWT (use env variable in production)\nconst JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key\";\n\n// ---------------- GET USERS -----------------\nexport async function GET() {\n  try {\n    const client = await clientPromise;\n    const db = client.db(\"lebel\");\n\n    const users = await db.collection(\"users\").find({}, { projection: { password: 0 } }).toArray();\n\n    return NextResponse.json({ users }, { status: 200 });\n  } catch (error) {\n    console.error(\"Database connection error:\", error);\n    return NextResponse.json(\n      { error: \"Database connection failed\" },\n      { status: 500 }\n    );\n  }\n}\n// ---------------- REGISTER USER -----------------\nexport async function POST(req) {\n  console.log(\"==================\",process.env.JWT_SECRET);\n  return\n  try {\n    const body = await req.json();\n    const { name, phoneNumber, email, password } = body;\n\n    if (!name || !phoneNumber || !email || !password) {\n      return NextResponse.json(\n        { error: \"All fields are required\" },\n        { status: 400 }\n      );\n    }\n\n    const client = await clientPromise;\n    const db = client.db(\"lebel\");\n\n    // Check if user already exists\n    const existingUser = await db.collection(\"users\").findOne({ email });\n    if (existingUser) {\n      return NextResponse.json(\n        { error: \"User already exists\" },\n        { status: 400 }\n      );\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    // Create user object\n    const newUser = {\n      name,\n      phoneNumber,\n      email,\n      password: hashedPassword,\n      createdAt: new Date(),\n    };\n\n    // Insert user\n    const result = await db.collection(\"users\").insertOne(newUser);\n\n    // Generate JWT token\n    const token = jwt.sign(\n      { userId: result.insertedId, email },\n      JWT_SECRET,\n      { expiresIn: \"1h\" }\n    );\n\n    return NextResponse.json(\n      { msg: \"User registered successfully\", token },\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error(\"User registration error:\", error);\n    return NextResponse.json(\n      { error: \"User registration failed\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;;;;;;;;;;;;AAIA,wDAAwD;AACxD,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAGtC,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,gHAAA,CAAA,UAAa;QAClC,MAAM,KAAK,OAAO,EAAE,CAAC;QAErB,MAAM,QAAQ,MAAM,GAAG,UAAU,CAAC,SAAS,IAAI,CAAC,CAAC,GAAG;YAAE,YAAY;gBAAE,UAAU;YAAE;QAAE,GAAG,OAAO;QAE5F,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAM,GAAG;YAAE,QAAQ;QAAI;IACpD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA6B,GACtC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,GAAG;IAC5B,QAAQ,GAAG,CAAC,sBAAqB,QAAQ,GAAG,CAAC,UAAU;IACvD;;AAyDF"}},
    {"offset": {"line": 152, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}