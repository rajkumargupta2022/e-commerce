{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file://D%3A/New%20folder/lib/mongodb.js"],"sourcesContent":["// lib/mongoose.js\n\nimport mongoose from 'mongoose';\n\nconst MONGODB_URI = \"mongodb://localhost:27017/lebel\"; // hardcoded for local DB\n\nif (!MONGODB_URI) {\n  throw new Error('Please define the MONGODB_URI');\n}\n\nlet cached = global.mongoose;\n\nif (!cached) {\n  cached = global.mongoose = { conn: null, promise: null };\n}\n\nasync function connect() {\n  if (cached.conn) {\n    return cached.conn;\n  }\n\n  if (!cached.promise) {\n    const opts = {\n      bufferCommands: false,\n    };\n\n    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {\n      return mongoose;\n    });\n  }\n  cached.conn = await cached.promise;\n  return cached.conn;\n}\n\nexport default connect;\n"],"names":[],"mappings":"AAAA,kBAAkB;;;;AAElB;;AAEA,MAAM,cAAc,mCAAmC,yBAAyB;AAEhF,uCAAkB;;AAElB;AAEA,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;QAClB;QAEA,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,MAAM,IAAI,CAAC,CAAC;YACzD,OAAO;QACT;IACF;IACA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACpB;uCAEe"}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 134, "column": 0}, "map": {"version":3,"sources":["file://D%3A/New%20folder/app/models/User.js"],"sourcesContent":["import mongoose, { Schema } from \"mongoose\";\r\n\r\nconst UserSchema = new Schema({\r\n  name: { type: String, required: true },\r\n  phoneNumber: { type: String, required: true },\r\n  email: { type: String, required: true, unique: true },\r\n  password: { type: String, required: true },\r\n  createdAt: { type: Date, default: Date.now },\r\n});\r\n\r\n// Avoid recompilation in Next.js hot-reload\r\nexport default mongoose.models.User || mongoose.model(\"User\", UserSchema);\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAAC;IAC5B,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,aAAa;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC5C,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;IACzC,WAAW;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;AAC7C;uCAGe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ"}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file://D%3A/New%20folder/app/api/users/route.js"],"sourcesContent":["// app/api/users/route.js\nimport { NextResponse } from \"next/server\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport connect from \"@/lib/mongodb\";\nimport User from \"@/app/models/User\"; \n\nconst JWT_SECRET = \"your_secret_key\";\n\n// ---------------- REGISTER USER -----------------\nexport async function POST(req) {\n  try {\n    await connect();\n\n    const { name, phoneNumber, email, password } = await req.json();\n\n    if (!name || !phoneNumber || !email || !password) {\n      return NextResponse.json(\n        { error: \"All fields are required\" },\n        { status: 400 }\n      );\n    }\n\n    const existingUser = await User.findOne({\n      $or: [{ email }, { phoneNumber }],\n    });\n\n    if (existingUser) {\n      return NextResponse.json(\n        { error: \"User with this email or phone number already exists\" },\n        { status: 400 }\n      );\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    // Create user\n    const newUser = await User.create({\n      name,\n      phoneNumber,\n      email,\n      password: hashedPassword,\n    });\n\n    // Generate JWT token\n    const token = jwt.sign({ userId: newUser._id, email }, JWT_SECRET);\n\n    return NextResponse.json(\n      { success: true, msg: \"User registered successfully\", token },\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error(\"User registration error:\", error);\n    return NextResponse.json(\n      { error: \"User registration failed\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"AAAA,yBAAyB;;;;AACzB;AACA;AACA;AACA;AACA;;;;;;AAEA,MAAM,aAAa;AAGZ,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,CAAA,GAAA,gHAAA,CAAA,UAAO,AAAD;QAEZ,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAE7D,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,UAAU;YAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,eAAe,MAAM,uHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YACtC,KAAK;gBAAC;oBAAE;gBAAM;gBAAG;oBAAE;gBAAY;aAAE;QACnC;QAEA,IAAI,cAAc;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsD,GAC/D;gBAAE,QAAQ;YAAI;QAElB;QAEA,gBAAgB;QAChB,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAEnD,cAAc;QACd,MAAM,UAAU,MAAM,uHAAA,CAAA,UAAI,CAAC,MAAM,CAAC;YAChC;YACA;YACA;YACA,UAAU;QACZ;QAEA,qBAAqB;QACrB,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC;YAAE,QAAQ,QAAQ,GAAG;YAAE;QAAM,GAAG;QAEvD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAM,KAAK;YAAgC;QAAM,GAC5D;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 242, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}